(***************************************************************************************************************)
(******                       This is the FeynRules mod-file for the Standard model                       ******)
(******                                                                                                   ******)
(******     Authors: N. Christensen, C. Duhr, B. Fuks                                                     ******)
(******                                                                                                   ******)
(****** Choose whether Feynman gauge is desired.                                                          ******)
(****** If set to False, unitary gauge is assumed.                                                          ****)
(****** Feynman gauge is especially useful for CalcHEP/CompHEP where the calculation is 10-100 times faster. ***)
(****** Feynman gauge is not supported in MadGraph and Sherpa.                                              ****)
(***************************************************************************************************************)

(* ************************** *)
(* *****  Information   ***** *)
(* ************************** *)
M$ModelName = "DarkA_Inelastic";

M$Information = {
  Authors      -> {"N. Christensen", "C. Duhr", "B. Fuks"}, 
  Version      -> "1.4.7",
  Date         -> "28. 09. 2016",
  Institutions -> {"Michigan State University", "Universite catholique de Louvain (CP3)", "IPHC Strasbourg / University of Strasbourg"},
  Emails       -> {"neil@pa.msu.edu", "claude.duhr@uclouvain.be", "benjamin.fuks@cnrs.in2p3.fr"},
  URLs         -> "http://feynrules.phys.ucl.ac.be/view/Main/StandardModel"
};

FeynmanGauge = True;

(* ************************** *)
(* ***** NLO Variables ****** *)
(******************************)

FR$LoopSwitches = {{Gf, MW}};
FR$RmDblExt = { ymb -> MB, ymc -> MC, ymdo -> MD, yme -> Me, 
   ymm -> MMU, yms -> MS, ymt -> MT, ymtau -> MTA, ymup -> MU};

(* ************************** *)
(* *****  Change  log   ***** *)
(* ************************** *)

(* v1.4.7: Index issue with the ghost Lagrangian (special thanks to S. Iwamoto *)
(* v1.4.6: NLO variable added.                                               *)
(* v1.4.5: Added widths for ghosts.                                          *)
(* v1.4.4: Changed widths of goldstone bosons to be the same as for the W and Z bosons *)
(* v1.4.3: Updated conventions for the symmetric structure constants of SU3. *)
(* v1.4.2: Set FeynmanGauge=True as default again.                           *)
(* v1.4: Added SU(2) representation.                                         *)
(*       -> Modification in the field declarations (doublets are added)      *)
(*       -> Modification in the Lagrangian (much simpler).                   *)
(* v1.3: Added yukawa couplings for all fermions for gauge invariance.       *)
(*       Added yukawa couplings for 1st generation fermions to Massless.rst. *)
(*       Updated parameters to PDG 2010.                                     *)
(* v1.2: Set FeynmanGauge=True as default.                                   *)
(*       Set Gluonic ghosts to be included in both gauges.                   *)
(* v1.1: Fixed yukawa couplings in Feynman gauge.                            *)
(*       Changed yd[n] CKM[n,m] to yd[m] CKM[n,m].                           *)
(*       Changed yu[n] Conjugate[CKM[m,n]] to yu[m] Conjugate[CKM[m,n]].     *)

(* ************************** *)
(* *****      vevs      ***** *)
(* ************************** *)
M$vevs = { {Phi[2],vev} };

(* ************************** *)
(* *****  Gauge groups  ***** *)
(* ************************** *)
M$GaugeGroups = {
  U1Y  == { 
    Abelian          -> True,  
    CouplingConstant -> g1, 
    GaugeBoson       -> B, 
    Charge           -> Y
  },
  SU2L == { 
    Abelian           -> False, 
    CouplingConstant  -> gw, 
    GaugeBoson        -> Wi, 
    StructureConstant -> Eps, 
    Representations   -> {Ta,SU2D}, 
    Definitions       -> {Ta[a_,b_,c_]->PauliSigma[a,b,c]/2, FSU2L[i_,j_,k_]:> I Eps[i,j,k]}
  },
  SU3C == { 
    Abelian           -> False, 
    CouplingConstant  -> gs, 
    GaugeBoson        -> G,
    StructureConstant -> f, 
    Representations   -> {T,Colour}, 
    SymmetricTensor   -> dSUN
  } 
};                                               (* DO WE NEED TO ADD A NEW GAUGE GROUP???  *)

(* ************************** *)
(* *****    Indices     ***** *)
(* ************************** *)

IndexRange[Index[SU2W      ]] = Unfold[Range[3]]; 
IndexRange[Index[SU2D      ]] = Unfold[Range[2]];
IndexRange[Index[Gluon     ]] = NoUnfold[Range[8]];
IndexRange[Index[Colour    ]] = NoUnfold[Range[3]]; 
IndexRange[Index[Generation]] = Range[3];

IndexStyle[SU2W,       j];
IndexStyle[SU2D,       k];
IndexStyle[Gluon,      a];
IndexStyle[Colour,     m];
IndexStyle[Generation, f];

(* ************************** *)
(* *** Interaction orders *** *)
(* ***  (as used by mg5)  *** *)
(* ************************** *)

M$InteractionOrderHierarchy = {
  {QCD, 1},
  {QED, 2},
  {QNP, 1}
};


(* ************************** *)
(* **** Particle classes **** *)
(* ************************** *)
M$ClassesDescription = {

(* Gauge bosons: physical vector fields *)
  V[1] == { 
    ClassName       -> A, 
    SelfConjugate   -> True,  
    Mass            -> 0,  
    Width           -> 0,  
    ParticleName    -> "a", 
    PDG             -> 22, 
    PropagatorLabel -> "a", 
    PropagatorType  -> W, 
    PropagatorArrow -> None,
    FullName        -> "Photon"
  },
  V[2] == { 
    ClassName       -> Z, 
    SelfConjugate   -> True,
    Mass            -> {MZ, 91.1876},
    Width           -> {WZ, 2.4952},
    ParticleName    -> "Z", 
    PDG             -> 23, 
    PropagatorLabel -> "Z",
    PropagatorType  -> Sine,
    PropagatorArrow -> None,
    FullName        -> "Z"
  },
  V[3] == {
    ClassName        -> W,
    SelfConjugate    -> False,
    Mass             -> {MW, Internal},
    Width            -> {WW, 2.085},
    ParticleName     -> "W+",
    AntiParticleName -> "W-",
    QuantumNumbers   -> {Q -> 1},
    PDG              -> 24, 
    PropagatorLabel  -> "W",
    PropagatorType   -> Sine,
    PropagatorArrow  -> Forward,
    FullName         -> "W"
  },
  V[4] == {
    ClassName        -> G,
    SelfConjugate    -> True,
    Indices          -> {Index[Gluon]},
    Mass             -> 0,
    Width            -> 0,
    ParticleName     -> "g", 
    PDG              -> 21,
    PropagatorLabel  -> "G",
    PropagatorType   -> C,
    PropagatorArrow  -> None,
    FullName         -> "G"
  },
  V[5] == {                                                                  (*   >>>>>   HERE!   <<<<<   *)   
    ClassName        -> X0,
    SelfConjugate    -> True,
    Mass             -> {mX0, 100},
    Width            -> {wX0, 1},
    PropagatorLabel  -> "X0",
    PropagatorArrow  -> None,
    PropagatorType   -> Sine,
    PDG              -> 70,
    ParticleName     -> "X0",
    AntiParticleName -> "X0",
    FullName         -> "Dark A"                                          (*   >>>>>   HERE!   <<<<<   *)
  },

(* Ghosts: related to physical gauge bosons *)
  U[1] == { 
    ClassName       -> ghA, 
    SelfConjugate   -> False,
    Ghost           -> A,
    QuantumNumbers  -> {GhostNumber -> 1},
    Mass            -> 0,
    Width	    -> 0,
    PropagatorLabel -> "uA",
    PropagatorType  -> GhostDash,
    PropagatorArrow -> Forward
  },
  U[2] == {
    ClassName       -> ghZ,
    SelfConjugate   -> False,
    Ghost           -> Z,
    QuantumNumbers  -> {GhostNumber -> 1},
    Mass            -> {MZ,91.1876},  
    Width	    -> {WZ, 2.4952},
    PropagatorLabel -> "uZ",
    PropagatorType  -> GhostDash,
    PropagatorArrow -> Forward
  },
  U[31] == { 
    ClassName       -> ghWp,
    SelfConjugate   -> False, 
    Ghost           -> W,
    QuantumNumbers  -> {GhostNumber -> 1, Q -> 1},
    Mass            -> {MW,Internal}, 
    Width           -> {WW, 2.085}, 
    PropagatorLabel -> "uWp",
    PropagatorType  -> GhostDash, 
    PropagatorArrow -> Forward
  },
  U[32] == { 
    ClassName       -> ghWm,
    SelfConjugate   -> False, 
    Ghost           -> Wbar,
    QuantumNumbers  -> {GhostNumber -> 1, Q -> -1},
    Mass            -> {MW,Internal}, 
    Width           -> {WW, 2.085},
    PropagatorLabel -> "uWm",
    PropagatorType  -> GhostDash, 
    PropagatorArrow -> Forward
  },
  U[4] == { 
    ClassName       -> ghG, 
    SelfConjugate   -> False,
    Indices         -> {Index[Gluon]},
    Ghost           -> G,
    PDG             -> 82,
    QuantumNumbers  ->{GhostNumber -> 1}, 
    Mass            -> 0,
    Width	    -> 0,
    PropagatorLabel -> "uG",
    PropagatorType  -> GhostDash,
    PropagatorArrow -> Forward
  },

(* Gauge bosons: unphysical vector fields *)
  V[11] == { 
    ClassName     -> B, 
    Unphysical    -> True, 
    SelfConjugate -> True, 
    Definitions   -> { B[mu_] -> -sw Z[mu]+cw A[mu]} 
  },
  V[12] == { 
    ClassName     -> Wi,
    Unphysical    -> True,
    SelfConjugate -> True, 
    Indices       -> {Index[SU2W]},
    FlavorIndex   -> SU2W,
    Definitions   -> { Wi[mu_,1] -> (Wbar[mu]+W[mu])/Sqrt[2],
                       Wi[mu_,2] -> (Wbar[mu]-W[mu])/(I*Sqrt[2]),
                       Wi[mu_,3] -> (cw Z[mu] + sw A[mu])}
  },

(* Ghosts: related to unphysical gauge bosons *)
  U[11] == {
    ClassName     -> ghB, 
    Unphysical    -> True,
    SelfConjugate -> False,
    Ghost         -> B, 
    Definitions   -> { ghB -> -sw ghZ + cw ghA}
  },
  U[12] == {
    ClassName     -> ghWi,
    Unphysical    -> True,
    SelfConjugate -> False,
    Ghost         -> Wi,
    Indices       -> {Index[SU2W]},
    FlavorIndex   -> SU2W,
    Definitions   -> { ghWi[1] -> (ghWp+ghWm)/Sqrt[2],
                       ghWi[2] -> (ghWm-ghWp)/(I*Sqrt[2]),
                       ghWi[3] -> (cw ghZ+sw ghA)}
  } ,

(* Fermions: physical fields *)
  F[1] == {
    ClassName        -> vl,
    ClassMembers     -> {ve,vm,vt},
    Indices          -> {Index[Generation]},
    FlavorIndex      -> Generation,
    SelfConjugate    -> False,
    Mass             -> 0,
    Width            -> 0,
    QuantumNumbers   -> {LeptonNumber -> 1},
    PropagatorLabel  -> {"v", "ve", "vm", "vt"} ,
    PropagatorType   -> S,
    PropagatorArrow  -> Forward,
    PDG              -> {12,14,16},
    ParticleName     -> {"ve","vm","vt"},
    AntiParticleName -> {"ve~","vm~","vt~"},
    FullName         -> {"Electron-neutrino", "Mu-neutrino", "Tau-neutrino"}
  },
  F[2] == {
    ClassName        -> l,
    ClassMembers     -> {e, mu, ta},
    Indices          -> {Index[Generation]},
    FlavorIndex      -> Generation,
    SelfConjugate    -> False,
    Mass             -> {Ml, {Me,5.11*^-4}, {MMU,0.10566}, {MTA,1.777}},
    Width            -> 0,
    QuantumNumbers   -> {Q -> -1, LeptonNumber -> 1},
    PropagatorLabel  -> {"l", "e", "mu", "ta"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> Forward,
    PDG              -> {11, 13, 15},
    ParticleName     -> {"e-", "mu-", "ta-"},
    AntiParticleName -> {"e+", "mu+", "ta+"},
    FullName         -> {"Electron", "Muon", "Tau"} 
  },
  F[3] == {
    ClassName        -> uq,
    ClassMembers     -> {u, c, t},
    Indices          -> {Index[Generation], Index[Colour]},
    FlavorIndex      -> Generation,
    SelfConjugate    -> False,
    Mass             -> {Mu, {MU, 2.55*^-3}, {MC,1.27}, {MT,172}},
    Width            -> {0, 0, {WT,1.50833649}},
    QuantumNumbers   -> {Q -> 2/3},
    PropagatorLabel  -> {"uq", "u", "c", "t"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> Forward,
    PDG              -> {2, 4, 6}, 
    ParticleName     -> {"u",  "c",  "t" },
    AntiParticleName -> {"u~", "c~", "t~"},
    FullName         -> {"u-quark", "c-quark", "t-quark"}
  },
  F[4] == {
    ClassName        -> dq,
    ClassMembers     -> {d, s, b},
    Indices          -> {Index[Generation], Index[Colour]},
    FlavorIndex      -> Generation,
    SelfConjugate    -> False,
    Mass             -> {Md, {MD,5.04*^-3}, {MS,0.101}, {MB,4.7}},
    Width            -> 0,
    QuantumNumbers   -> {Q -> -1/3},
    PropagatorLabel  -> {"dq", "d", "s", "b"},
    PropagatorType   -> Straight, 
    PropagatorArrow  -> Forward,
    PDG              -> {1,3,5},
    ParticleName     -> {"d",  "s",  "b" },
    AntiParticleName -> {"d~", "s~", "b~"},
    FullName         -> {"d-quark", "s-quark", "b-quark"}
  },
  F[5] == {                                                                       (*   >>>>>   HERE!   <<<<<   *)
    ClassName        -> X1,
    SelfConjugate    -> True,
    Mass             -> {mX1, 500},
    Width            -> {wX1, 0},
    PropagatorLabel  -> {"X1"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,
    PDG              -> {71},
    ParticleName     -> {"~X1"},
    AntiParticleName -> {"~X1bar"},
    FullName         -> {"~fermion 1"}
  },
  F[6] == {
    ClassName        -> X2,
    SelfConjugate    -> True,
    Mass             -> {mX2, 500},
    Width            -> {wX2, 0},
    PropagatorLabel  -> {"X2"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,
    PDG              -> {72},
    ParticleName     -> {"~X2"},
    AntiParticleName -> {"~X2bar"},
    FullName         -> {"~fermion 2"}
  },                                                                                (*   >>>>>   HERE!   <<<<<   *)                                            (*   >>>>>   HERE! Nico  <<<<<   *)
 F[7] == {
    ClassName        -> HNL4,
    SelfConjugate    -> True,
    Mass             -> {mHNL4, 500},
    Width            -> {wHNL4, 0},
    PropagatorLabel  -> {"HNL4"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,
    PDG              -> {75},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"HNL4"},
    AntiParticleName -> {"HNL4bar"},
    FullName         -> {"fermion 4"}
  },                                                 (*   >>>>>   HERE! Nico  <<<<<   *)
 F[8] == {
    ClassName        -> HNL5,
    SelfConjugate    -> True,
    Mass             -> {mHNL5, 500},
    Width            -> {wHNL5, 0},
    PropagatorLabel  -> {"HNL5"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,
    PDG              -> {76},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"HNL5"},
    AntiParticleName -> {"HNL5bar"},
    FullName         -> {"fermion 5"}
  },                                                 (*   >>>>>   HERE! Nico  <<<<<   *)
 F[9] == {
    ClassName        -> HNL6,
    SelfConjugate    -> True,
    Mass             -> {mHNL6, 500},
    Width            -> {wHNL6, 0},
    PropagatorLabel  -> {"HNL6"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,                         (* HNL are Majorana *)
    PDG              -> {77},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"HNL6"},
    AntiParticleName -> {"HNL6bar"},
    FullName         -> {"fermion 6"}
  },                                                 (*   >>>>>   HERE! Nico  <<<<<   *)
 F[10] == {
    ClassName        -> nu3,                 (* This is the active neutrino of the model with mass=0.05 eV, is not Majorana *)
    SelfConjugate    -> False,
    Mass             -> {mnu3, 500},
    Width            -> {wnu3, 0},
    PropagatorLabel  -> {"nu3"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> Forward,                         (* nu3 is not majorana Majorana *)
    PDG              -> {78},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"nu3"},
    AntiParticleName -> {"nu3bar"},
    FullName         -> {"fermion 3"}
  },                                                 (*   >>>>>   HERE! Nico  <<<<<   *)
 F[16] == {
    ClassName        -> HNL7,
    SelfConjugate    -> True,
    Mass             -> {mHNL7, 500},
    Width            -> {wHNL7, 0},
    PropagatorLabel  -> {"HNL7"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,                         (* HNL are Majorana *)
    PDG              -> {79},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"HNL7"},
    AntiParticleName -> {"HNL7bar"},
    FullName         -> {"fermion 7"}
  }, 
 F[17] == {
    ClassName        -> HNL8,
    SelfConjugate    -> True,
    Mass             -> {mHNL8, 500},
    Width            -> {wHNL8, 0},
    PropagatorLabel  -> {"HNL8"},
    PropagatorType   -> Straight,
    PropagatorArrow  -> None,                         (* HNL are Majorana *)
    PDG              -> {80},                         (*   >>>>>   Because the scalar is 73!   <<<<<   *)
    ParticleName     -> {"HNL8"},
    AntiParticleName -> {"HNL8bar"},
    FullName         -> {"fermion 8"}
  },   


(* Fermions: unphysical fields *)
  F[11] == { 
    ClassName      -> LL, 
    Unphysical     -> True, 
    Indices        -> {Index[SU2D], Index[Generation]},
    FlavorIndex    -> SU2D,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> -1/2},
    Definitions    -> { LL[sp1_,1,ff_] :> Module[{sp2}, ProjM[sp1,sp2] vl[sp2,ff]],
                        LL[sp1_,2,ff_] :> Module[{sp2}, ProjM[sp1,sp2] l[sp2,ff]] }
  },
  F[12] == { 
    ClassName      -> lR, 
    Unphysical     -> True, 
    Indices        -> {Index[Generation]},
    FlavorIndex    -> Generation,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> -1},
    Definitions    -> { lR[sp1_,ff_] :> Module[{sp2}, ProjP[sp1,sp2] l[sp2,ff]] }
  },
  F[13] == { 
    ClassName      -> QL, 
    Unphysical     -> True, 
    Indices        -> {Index[SU2D], Index[Generation], Index[Colour]},
    FlavorIndex    -> SU2D,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> 1/6},
    Definitions    -> { QL[sp1_,1,ff_,cc_] :> Module[{sp2}, ProjM[sp1,sp2] uq[sp2,ff,cc]], 
                        QL[sp1_,2,ff_,cc_] :> Module[{sp2,ff2}, CKM[ff,ff2] ProjM[sp1,sp2] dq[sp2,ff2,cc]] }
  },
  F[14] == { 
    ClassName      -> uR, 
    Unphysical     -> True, 
    Indices        -> {Index[Generation], Index[Colour]},
    FlavorIndex    -> Generation,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> 2/3},
    Definitions    -> { uR[sp1_,ff_,cc_] :> Module[{sp2}, ProjP[sp1,sp2] uq[sp2,ff,cc]] }
  },
  F[15] == { 
    ClassName      -> dR, 
    Unphysical     -> True, 
    Indices        -> {Index[Generation], Index[Colour]},
    FlavorIndex    -> Generation,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> -1/3},
    Definitions    -> { dR[sp1_,ff_,cc_] :> Module[{sp2}, ProjP[sp1,sp2] dq[sp2,ff,cc]] }
  },

(* Higgs: physical scalars  *)
  S[1] == {
    ClassName       -> H,
    SelfConjugate   -> True,
    Mass            -> {MH,125},
    Width           -> {WH,0.00407},
    PropagatorLabel -> "H",
    PropagatorType  -> D,
    PropagatorArrow -> None,
    PDG             -> 25,
    ParticleName    -> "H",
    FullName        -> "H"
  },

(* Higgs: physical scalars  *)
  S[2] == {
    ClassName       -> G0,
    SelfConjugate   -> True,
    Goldstone       -> Z,
    Mass            -> {MZ, 91.1876},
    Width           -> {WZ, 2.4952},
    PropagatorLabel -> "Go",
    PropagatorType  -> D,
    PropagatorArrow -> None,
    PDG             -> 250,
    ParticleName    -> "G0",
    FullName        -> "G0"
  },
  S[3] == {
    ClassName        -> GP,
    SelfConjugate    -> False,
    Goldstone        -> W,
    Mass             -> {MW, Internal},
    QuantumNumbers   -> {Q -> 1},
    Width            -> {WW, 2.085},
    PropagatorLabel  -> "GP",
    PropagatorType   -> D,
    PropagatorArrow  -> None,
    PDG              -> 251,
    ParticleName     -> "G+",
    AntiParticleName -> "G-",
    FullName         -> "GP"
  },
  S[4] == {                                                                    (*   >>>>>   HERE!   <<<<<   *)    
    ClassName        -> S0,
    SelfConjugate    -> True,
    Mass             -> {mS0, 0.5},                           (*   >>>>>   HERE! Nico   <<<<<   *)
    Width            -> {wS0, 1},
    PropagatorLabel  -> "S0",
    PropagatorArrow  -> None,
    PropagatorType   -> D,
    PDG              -> 73,
    ParticleName     -> "S0",
    AntiParticleName -> "S0bar",
    FullName         -> "Scalar"
  },

(* Higgs: unphysical scalars  *)
  S[11] == { 
    ClassName      -> Phi, 
    Unphysical     -> True, 
    Indices        -> {Index[SU2D]},
    FlavorIndex    -> SU2D,
    SelfConjugate  -> False,
    QuantumNumbers -> {Y -> 1/2},
    Definitions    -> { Phi[1] -> -I GP,
                        Phi[2] -> (vev + H + I G0)/Sqrt[2]  }
  }
};


(* ************************** *)
(* *****     Gauge      ***** *)
(* *****   Parameters   ***** *)
(* *****   (FeynArts)   ***** *)
(* ************************** *)

GaugeXi[ V[1]  ] = GaugeXi[A];
GaugeXi[ V[2]  ] = GaugeXi[Z];
GaugeXi[ V[3]  ] = GaugeXi[W];
GaugeXi[ V[4]  ] = GaugeXi[G];
GaugeXi[ S[1]  ] = 1;
GaugeXi[ S[2]  ] = GaugeXi[Z];
GaugeXi[ S[3]  ] = GaugeXi[W];
GaugeXi[ U[1]  ] = GaugeXi[A];
GaugeXi[ U[2]  ] = GaugeXi[Z];
GaugeXi[ U[31] ] = GaugeXi[W];
GaugeXi[ U[32] ] = GaugeXi[W];
GaugeXi[ U[4]  ] = GaugeXi[G];


(* ************************** *)
(* *****   Parameters   ***** *)
(* ************************** *)
M$Parameters = {

  (* External parameters *)
  aEWM1 == { 
    ParameterType    -> External, 
    BlockName        -> SMINPUTS, 
    OrderBlock       -> 1, 
    Value            -> 127.9,
    InteractionOrder -> {QED,-2},
    Description      -> "Inverse of the EW coupling constant at the Z pole"
  },
  Gf == {
    ParameterType    -> External,
    BlockName        -> SMINPUTS,
    OrderBlock       -> 2,
    Value            -> 1.16637*^-5, 
    InteractionOrder -> {QED,2},
    TeX              -> Subscript[G,f],
    Description      -> "Fermi constant"
  },
  aS    == { 
    ParameterType    -> External,
    BlockName        -> SMINPUTS,
    OrderBlock       -> 3,
    Value            -> 0.1184, 
    InteractionOrder -> {QCD,2},
    TeX              -> Subscript[\[Alpha],s],
    Description      -> "Strong coupling constant at the Z pole"
  },
  ymdo == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 1,
    Value         -> 5.04*^-3,
    Description   -> "Down Yukawa mass"
  },
  ymup == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 2,
    Value         -> 2.55*^-3,
    Description   -> "Up Yukawa mass"
  },
  yms == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 3,
    Value         -> 0.101,
    Description   -> "Strange Yukawa mass"
  },
  ymc == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 4,
    Value         -> 1.27,
    Description   -> "Charm Yukawa mass"
  },
  ymb == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 5,
    Value         -> 4.7,
    Description   -> "Bottom Yukawa mass"
  },
  ymt == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 6,
    Value         -> 172,
    Description   -> "Top Yukawa mass"
  },
  yme == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 11,
    Value         -> 5.11*^-4,
    Description   -> "Electron Yukawa mass"
  },
  ymm == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 13,
    Value         -> 0.10566,
    Description   -> "Muon Yukawa mass"
  },
  ymtau == {
    ParameterType -> External,
    BlockName     -> YUKAWA,
    OrderBlock    -> 15,
    Value         -> 1.777,
    Description   -> "Tau Yukawa mass"
  },
  cabi == {
    ParameterType -> External,
    BlockName     -> CKMBLOCK,
    OrderBlock    -> 1,
    Value         -> 0.227736,
    TeX           -> Subscript[\[Theta], c],
    Description   -> "Cabibbo angle"
  },



  gX == {                                                                          (*   >>>>>   HERE!   <<<<<   *)                                                                         
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    InteractionOrder -> {QNP,1},
    Description      -> "gX"
  },
  QX == {                                                                         
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "QX"
  },                                                            (* eliminated the schi because is an internal parameter depending on epsilon  *)


  epsilondark == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "epsilon dark"
  },                                      (*   >>>>>   HERE! Nico (Probably we should go back to Gordan's model)   <<<<<   *)



 vevscal == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "vev scalar"
  },                                                (*   >>>>>   HERE! Nico   <<<<<   *)
 vevhi == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 246.0,
    Description      -> "vev higgsss"
  },                                                (*   >>>>>   HERE! Nico   <<<<<   *)
 lambdaphih == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "Lambda phi h"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)


 Ualphanu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphanu3"
  }, 
 UalphaHNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphaHNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UalphaHNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphaHNL5"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UalphaHNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphaHNL6"
  }, 
 UalphaHNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphaHNL7"
  },                                            (*   >>>>>   HERE! Nico  <<<<<   *)
 UalphaHNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_alphaHNL8"
  }, 
 UN1nu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1nu3"
  },         
 UN1HNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1HNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN1HNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1HNL5"
  },                                                  (*   >>>>>   HERE! Nico  <<<<<   *)
 UN1HNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1HNL6"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN1HNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1HNL7"
  },          
 UN1HNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N1HNL8"
  },  
 UN2nu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2nu3"
  },         
 UN2HNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2HNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN2HNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2HNL5"
  },                                                  (*   >>>>>   HERE! Nico  <<<<<   *)
 UN2HNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2HNL6"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN2HNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2HNL7"
  },          
 UN2HNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N2HNL8"
  },
 UN3nu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3nu3"
  },         
 UN3HNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3HNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN3HNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3HNL5"
  },                                                  (*   >>>>>   HERE! Nico  <<<<<   *)
 UN3HNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3HNL6"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UN3HNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3HNL7"
  },          
 UN3HNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_N3HNL8"
  },
 UDLnu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLnu3"
  },
 UDLHNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLHNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UDLHNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLHNL5"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *) 
 UDLHNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLHNL6"
  },  
 UDLHNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLHNL7"
  },   
 UDLHNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DLHNL8"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UDRnu3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRnu3"
  },
 UDRHNL4 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRHNL4"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *)
 UDRHNL5 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRHNL5"
  },                                                (*   >>>>>   HERE! Nico  <<<<<   *) 
 UDRHNL6 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRHNL6"
  },  
 UDRHNL7 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRHNL7"
  },   
 UDRHNL8 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "U_DRHNL8"
  }, 


 Youkawa1 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "Youkawa1"
  }, 
 Youkawa2 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "Youkawa2"
  }, 
 Youkawa3 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "Youkawa3"
  }, 
 Ychi == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.1,
    Description      -> "Y^chi"
  }, 



  sw0 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> Sqrt[0.2311],
    Description      -> "sine_weak"
  },
  cw0 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> Sqrt[1-0.2311],
    Description      -> "cos_weak"
  },
  gw0 == {
    ParameterType    -> External, 
    BlockName        -> NP,
    Value            -> 0.629927,
    Description      -> "g_weak"
  },                                                                               (*   >>>>>   HERE!   <<<<<   *)
  e0 == { 
    ParameterType    -> External, 
    Value            -> Sqrt[4 Pi (1/127.9)],                                          (*   >>>>>   HERE! Correct?   <<<<<   *)
    InteractionOrder -> {QNP,1}, 
    Description      -> "Electric coupling constant"
  },


  (* Internal Parameters *)

 c33 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c33"
  },
 c34 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c34"
  },
 c35 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c35"
  },
 c36 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c36"
  },
 c37 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c37"
  },
 c38 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) Ualphanu3 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c38"
  },
 c43 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c43"
  },
 c44 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c44"
  },
 c45 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c45"
  },
c46 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c46"
  },
c47 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c47"
  },
c48 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL4 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c48"
  },
 c53 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c53"
  },
 c54 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c54"
  },
 c55 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c55"
  },
c56 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c56"
  },
c57 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c57"
  },
c58 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL5 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c58"
  },
 c63 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c63"
  },
 c64 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c64"
  },
 c65 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c65"
  },
c66 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c66"
  },
c67 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c67"
  },
c68 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL6 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c68"
  },
 c73 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c73"
  },
 c74 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c74"
  },
 c75 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c75"
  },
c76 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c76"
  },
c77 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c77"
  },
c78 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL7 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c78"
  },
 c83 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 Ualphanu3 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c83"
  },
 c84 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 UalphaHNL4 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c84"
  },
 c85 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 UalphaHNL5 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c85"
  },
c86 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 UalphaHNL6 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c86"
  },
c87 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 UalphaHNL7 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c87"
  },
c88 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (gw0/2cw0) UalphaHNL8 UalphaHNL8 (cbeta + sbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "c88"
  },








 d33 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d33"
  },
 d34 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d34"
  },
 d35 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d35"
  },
 d36 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d36"
  },
 d37 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d37"
  },
 d38 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) Ualphanu3 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d38"
  },
 d43 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d43"
  },
 d44 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d44"
  },
 d45 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d45"
  },
d46 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d46"
  },
d47 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d47"
  },
d48 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL4 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d48"
  },
 d53 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d53"
  },
 d54 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d54"
  },
 d55 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d55"
  },
d56 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d56"
  },
d57 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d57"
  },
d58 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL5 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d58"
  },
 d63 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d63"
  },
 d64 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d64"
  },
 d65 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d65"
  },
d66 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d66"
  },
d67 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d67"
  },
d68 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL6 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d68"
  },
 d73 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d73"
  },
 d74 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d74"
  },
 d75 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d75"
  },
d76 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d76"
  },
d77 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d77"
  },
d78 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL7 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d78"
  },
 d83 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 Ualphanu3 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d83"
  },
 d84 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 UalphaHNL4 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d84"
  },
 d85 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 UalphaHNL5 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d85"
  },
d86 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 UalphaHNL6 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d86"
  },
d87 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 UalphaHNL7 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d87"
  },
d88 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (-gw0/2cw0) UalphaHNL8 UalphaHNL8 (sbeta - cbeta*sw0*tchi ),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "d88"
  },



(* All possible interaction terms. The alpha is fixed and is 3, that is the bridge to go from every HNL to an other   *)



(* All possible interaction terms. The alpha is fixed and is 3, that is the bridge to go from every HNL to an other   *)


(*


 Deltah33 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))*(Sqrt[2]*mnu3/vevscal)*( Unu3nu3 * (UHNL4nu3+ UHNL5nu3+ UHNL6nu3) + (Unu3HNL4+ Unu3HNL5+ Unu3HNL6) * Unu3nu3 ) ,  
    Description      -> "Deltah 33"
  },
 Deltah34 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))*(Sqrt[2]*mnu3/vevscal)*( Unu3nu3 * (UHNL4HNL4+ UHNL5HNL4+ UHNL6HNL4) + (Unu3HNL4+ Unu3HNL5+ Unu3HNL6) * Unu3HNL4 ) ,  
    Description      -> "Deltah 34"
  },
 Deltah35 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))*(Sqrt[2]*mnu3/vevscal)*( Unu3nu3 * (UHNL4HNL5+ UHNL5HNL5+ UHNL6HNL5) + (Unu3HNL4+ Unu3HNL5+ Unu3HNL6) * Unu3HNL5 ) ,  
    Description      -> "Deltah 35"
  },
 Deltah36 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))*(Sqrt[2]*mnu3/vevscal)*( Unu3nu3 * (UHNL4HNL6+ UHNL5HNL6+ UHNL6HNL6) + (Unu3HNL4+ Unu3HNL5+ Unu3HNL6) * Unu3HNL6 ) ,  
    Description      -> "Deltah 36"
  },
 Deltah3DN == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))*(Sqrt[2]*mnu3/vevscal)*( Unu3nu3 * (UHNL4DN+ UHNL5DN+ UHNL6DN) ) ,  
    Description      -> "Deltah 3DN"
  },
 Deltah43 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL4nu3 *(UHNL4nu3+ UHNL5nu3+ UHNL6nu3) + (UHNL4HNL4+ UHNL4HNL5+ UHNL4HNL6) * Unu3nu3),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 43"
  },
 Deltah44 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL4nu3 *(UHNL4HNL4+ UHNL5HNL4+ UHNL6HNL4) + (UHNL4HNL4+ UHNL4HNL5+ UHNL4HNL6) * Unu3HNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 44"
  },
 Deltah45 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL4nu3 *(UHNL4HNL5+ UHNL5HNL5+ UHNL6HNL5) + (UHNL4HNL4+ UHNL4HNL5+ UHNL4HNL6) * Unu3HNL5)  ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 45"
  },
 Deltah46 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL4nu3 *(UHNL4HNL6+ UHNL5HNL6+ UHNL6HNL6) + (UHNL4HNL4+ UHNL4HNL5+ UHNL4HNL6) * Unu3HNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 46"
  },
 Deltah53 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL5nu3 *(UHNL4nu3+ UHNL5nu3+ UHNL6nu3) + (UHNL5HNL4+ UHNL5HNL5+ UHNL5HNL6) * Unu3nu3),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 53"
  },
 Deltah54 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL5nu3 *(UHNL4HNL4+ UHNL5HNL4+ UHNL6HNL4) + (UHNL5HNL4+ UHNL5HNL5+ UHNL5HNL6) * Unu3HNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 54"
  },
 Deltah55 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL5nu3 *(UHNL4HNL5+ UHNL5HNL5+ UHNL6HNL5) + (UHNL5HNL4+ UHNL5HNL5+ UHNL5HNL6) * Unu3HNL5) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 55"
  },
 Deltah56 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL5nu3 *(UHNL4HNL6+ UHNL5HNL6+ UHNL6HNL6) + (UHNL5HNL4+ UHNL5HNL5+ UHNL5HNL6) * Unu3HNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 56"
  },
 Deltah63 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL6nu3 *(UHNL4nu3+ UHNL5nu3+ UHNL6nu3) + (UHNL6HNL4+ UHNL6HNL5+ UHNL6HNL6) * Unu3nu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 63"
  },
 Deltah64 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL6nu3 *(UHNL4HNL4+ UHNL5HNL4+ UHNL6HNL4) + (UHNL6HNL4+ UHNL6HNL5+ UHNL6HNL6) * Unu3HNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 64"
  },
 Deltah65 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL6nu3 *(UHNL4HNL5+ UHNL5HNL5+ UHNL6HNL5) + (UHNL6HNL4+ UHNL6HNL5+ UHNL6HNL6) * Unu3HNL5) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 65"
  },
 Deltah66 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* ( UHNL6nu3 *(UHNL4HNL6+ UHNL5HNL6+ UHNL6HNL6) + (UHNL6HNL4+ UHNL6HNL5+ UHNL6HNL6) * Unu3HNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 66"
  },
 Deltah4DN == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* UHNL4nu3 *(Sqrt[2]*mnu3/vevscal)* (UHNL4DN+ UHNL5DN + UHNL6DN) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 4DN"
  },
 Deltah5DN == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* UHNL5nu3 *(Sqrt[2]*mnu3/vevscal)* (UHNL4DN+ UHNL5DN + UHNL6DN) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 5DN"
  },
 Deltah6DN == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* UHNL6nu3 *(Sqrt[2]*mnu3/vevscal)* (UHNL4DN+ UHNL5DN + UHNL6DN),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah 6DN"
  },
 DeltahDN3 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* (UDNHNL4+ UDNHNL5 + UDNHNL6) * Unu3nu3 ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah DN3"
  },
 DeltahDN4 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* (UDNHNL4+ UDNHNL5 + UDNHNL6) * Unu3HNL4 ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah DN4"
  },
 DeltahDN5 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* (UDNHNL4+ UDNHNL5 + UDNHNL6) * Unu3HNL5 ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah DN5"
  },
 DeltahDN6 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Sqrt[2]*mnu3/vevscal)* (UDNHNL4+ UDNHNL5 + UDNHNL6) * Unu3HNL6 ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltah DN6"
  },                                              


                                                   *)

(*    The DeltahDNDN is zero!!    *)




(*   Deltaphi33 is zero!!  *)

 Deltaphi33 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLnu3 + UDRnu3),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 33"
  },

 Deltaphi34 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLHNL4 + UDRHNL4),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 34"
  },
 Deltaphi35 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 35"
  },
 Deltaphi36 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 36"
  },
 Deltaphi37 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 37"
  },
 Deltaphi38 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1nu3 + Youkawa2 UN2nu3 + Youkawa3 UN3nu3) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 38"
  },
 Deltaphi43 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLnu3 + UDRnu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 43"
  },
 Deltaphi44 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLHNL4 + UDRHNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 44"
  },
 Deltaphi45 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 45"
  },
 Deltaphi46 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 46"
  },
 Deltaphi47 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 47"
  },
 Deltaphi48 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL4 + Youkawa2 UN2HNL4 + Youkawa3 UN3HNL4) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 48"
  },
 Deltaphi53 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLnu3 + UDRnu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 53"
  },
 Deltaphi54 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLHNL4 + UDRHNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 54"
  },
 Deltaphi55 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 55"
  },
 Deltaphi56 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 56"
  },
 Deltaphi57 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 57"
  },
 Deltaphi58 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL5 + Youkawa2 UN2HNL5 + Youkawa3 UN3HNL5) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 58"
  },

 Deltaphi63 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLnu3 + UDRnu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 63"
  },
 Deltaphi64 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLHNL4 + UDRHNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 64"
  },
 Deltaphi65 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 65"
  },
 Deltaphi66 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 66"
  },
 Deltaphi67 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 67"
  },
 Deltaphi68 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL6 + Youkawa2 UN2HNL6 + Youkawa3 UN3HNL6) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 68"
  },
 Deltaphi73 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLnu3 + UDRnu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 73"
  },
 Deltaphi74 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLHNL4 + UDRHNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 74"
  },
 Deltaphi75 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 75"
  },
 Deltaphi76 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 76"
  },
 Deltaphi77 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 77"
  },
 Deltaphi78 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL7 + Youkawa2 UN2HNL7 + Youkawa3 UN3HNL7) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 78"
  },
 Deltaphi83 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLnu3 + UDRnu3) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 83"
  },
 Deltaphi84 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLHNL4 + UDRHNL4) ,   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 84"
  },
 Deltaphi85 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLHNL5 + UDRHNL5),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 85"
  },
 Deltaphi86 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLHNL6 + UDRHNL6),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 86"
  },
 Deltaphi87 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLHNL7 + UDRHNL7),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 87"
  },
 Deltaphi88 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> (1/(2*Sqrt[2]))* (Youkawa1 UN1HNL8 + Youkawa2 UN2HNL8 + Youkawa3 UN3HNL8) * (UDLHNL8 + UDRHNL8),   (* There should be an other term, but for L-R symmetry is zero *)
    Description      -> "Deltaphi 88"
  },

(* those are the terms that couple with the dark scalar gauge basis. Are 12 because the N couples both with N and with DN, the DN instead couple just with the N.    *)
(* there is no U_DNDN existing in the model............    *)



 chi == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> epsilondark/cw0,
    Description      -> "chi"
  },
 schi == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Sin[epsilondark/cw0],
    Description      -> "sen chi"
  },
 mu2 == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> mX0^2/MZ^2,
    Description      -> "mu^2"
  },
 cchi == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Cos[epsilondark/cw0],                         (*    Sqrt[1-schi^2],  *)
    Description      -> "cos_chi"
  },
 tchi == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Tan[epsilondark/cw0],                          (*  schi/Sqrt[1-schi^2],   *)
    Description      -> "tan_chi"
  },
 cbeta == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Cos[1/2 ArcTan[2sw0*schi*cchi/(cchi^2-schi^2*sw0^2-mu2)]],
    Description      -> "cos_beta"
  },
 sbeta == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Sin[1/2 ArcTan[2sw0*schi*cchi/(cchi^2-schi^2*sw0^2-mu2)]],
    Description      -> "sin_beta"
  },

(*    I HAVE WRITTEN SIN(CHI) AS CHI IN FUNCTION OF EPSILONDARK. SO SCHI IS NOT ANYMORE AN EXTERNAL PARAMETER BUT AN INTERNAL, AND DUE TO THE SMALL MIXING IS JUST CHI, THE ARGUMENT, ANYWAY I HAVE ANYWAY DECLARES A SCHI, JUST FOR THE TANGENT OF 2BETHA.....           *)


(*
 Ychi == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Sqrt[2]*mX1/vevscal ,
    Description      -> "Y^chi"
  }, 

                     *)

(*                                                                                 (*   >>>>>   HERE! Nico  <<<<<   *)
 YL == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> Sqrt[2]*mDN/vevscal,
    Description      -> "Y_LR"
  },                                                                                   (*   >>>>>   HERE! Nico  <<<<<   *)
                    *)


 tanangle == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> lambdaphih*vevscal*vevhi/(mS0^2-MH^2),
    Description      -> "tann nthetascal"
  },                                                                                  (*   >>>>>   HERE! Nico  <<<<<   *)

 thetascalar == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> 1/2 ArcTan[tanangle], (* 0.5 ArcTan[tan2thetascalar] *)
    Description      -> "thetascalar"
  },                                                                                  (*   >>>>>   HERE! Nico  <<<<<   *)




(*
 dVe == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> gw0/(2cw0)(3/2*cbeta*sw0*tchi-Sqrt[1-cbeta^2]*(2sw0^2-1/2)),
    Description      -> "dV_electron"
  },

 dAe == {
    ParameterType    -> Internal, 
    BlockName        -> NP,
    Value            -> -gw0/(2cw0)(cbeta*sw0*tchi-Sqrt[1-cbeta^2])/2,
    Description      -> "dA_electron"
  },
        *)

  aEW == {
    ParameterType    -> Internal,
    Value            -> 1/aEWM1,
    InteractionOrder -> {QED,2},
    TeX              -> Subscript[\[Alpha], EW],
    Description      -> "Electroweak coupling contant"
  },
  MW == { 
    ParameterType -> Internal, 
    Value         -> Sqrt[MZ^2/2+Sqrt[MZ^4/4-Pi/Sqrt[2]*aEW/Gf*MZ^2]], 
    TeX           -> Subscript[M,W], 
    Description   -> "W mass"
  },
  sw2 == { 
    ParameterType -> Internal, 
    Value         -> 1-(MW/MZ)^2, 
    Description   -> "Squared Sin of the Weinberg angle"
  },
  ee == { 
    ParameterType    -> Internal, 
    Value            -> Sqrt[4 Pi aEW], 
    InteractionOrder -> {QED,1}, 
    TeX              -> e,  
    Description      -> "Electric coupling constant"
  },
  cw == { 
    ParameterType -> Internal, 
    Value         -> Sqrt[1-sw2], 
    TeX           -> Subscript[c,w], 
    Description   -> "Cosine of the Weinberg angle"
  },
  sw == { 
    ParameterType -> Internal, 
    Value         -> Sqrt[sw2], 
    TeX           -> Subscript[s,w], 
    Description   -> "Sine of the Weinberg angle"
  },
  gw == { 
    ParameterType    -> Internal, 
    Definitions      -> {gw->ee/sw}, 
    InteractionOrder -> {QED,1},  
    TeX              -> Subscript[g,w], 
    Description      -> "Weak coupling constant at the Z pole"
  },
  g1 == { 
    ParameterType    -> Internal, 
    Definitions      -> {g1->ee/cw}, 
    InteractionOrder -> {QED,1},  
    TeX              -> Subscript[g,1], 
    Description      -> "U(1)Y coupling constant at the Z pole"
  },
  gs == { 
    ParameterType    -> Internal, 
    Value            -> Sqrt[4 Pi aS],
    InteractionOrder -> {QCD,1},  
    TeX              -> Subscript[g,s], 
    ParameterName    -> G,
    Description      -> "Strong coupling constant at the Z pole"
  },
  vev == {
    ParameterType    -> Internal,
    Value            -> 2*MW*sw/ee, 
    InteractionOrder -> {QED,-1},
    Description      -> "Higgs vacuum expectation value"
  },
  lam == {
    ParameterType    -> Internal,
    Value            -> MH^2/(2*vev^2),
    InteractionOrder -> {QED, 2},
    Description      -> "Higgs quartic coupling"
  },
  muH == {
    ParameterType -> Internal,
    Value         -> Sqrt[vev^2 lam],
    TeX           -> \[Mu],
    Description   -> "Coefficient of the quadratic piece of the Higgs potential"
  },
  yl == {
    ParameterType    -> Internal,
    Indices          -> {Index[Generation], Index[Generation]},
    Definitions      -> {yl[i_?NumericQ, j_?NumericQ] :> 0  /; (i =!= j)},
    Value            -> {yl[1,1] -> Sqrt[2] yme / vev, yl[2,2] -> Sqrt[2] ymm / vev, yl[3,3] -> Sqrt[2] ymtau / vev},
    InteractionOrder -> {QED, 1},
    ParameterName    -> {yl[1,1] -> ye, yl[2,2] -> ym, yl[3,3] -> ytau},
    TeX              -> Superscript[y, l],
    Description      -> "Lepton Yukawa couplings"
  },
  yu == {
    ParameterType    -> Internal,
    Indices          -> {Index[Generation], Index[Generation]},
    Definitions      -> {yu[i_?NumericQ, j_?NumericQ] :> 0  /; (i =!= j)},
    Value            -> {yu[1,1] -> Sqrt[2] ymup/vev, yu[2,2] -> Sqrt[2] ymc/vev, yu[3,3] -> Sqrt[2] ymt/vev},
    InteractionOrder -> {QED, 1},
    ParameterName    -> {yu[1,1] -> yup, yu[2,2] -> yc, yu[3,3] -> yt},
    TeX              -> Superscript[y, u],
    Description      -> "Up-type Yukawa couplings"
  },
  yd == {
    ParameterType    -> Internal,
    Indices          -> {Index[Generation], Index[Generation]},
    Definitions      -> {yd[i_?NumericQ, j_?NumericQ] :> 0  /; (i =!= j)},
    Value            -> {yd[1,1] -> Sqrt[2] ymdo/vev, yd[2,2] -> Sqrt[2] yms/vev, yd[3,3] -> Sqrt[2] ymb/vev},
    InteractionOrder -> {QED, 1},
    ParameterName    -> {yd[1,1] -> ydo, yd[2,2] -> ys, yd[3,3] -> yb},
    TeX              -> Superscript[y, d],
    Description      -> "Down-type Yukawa couplings"
  },
(* N. B. : only Cabibbo mixing! *)
  CKM == { 
    ParameterType -> Internal,
    Indices       -> {Index[Generation], Index[Generation]},
    Unitary       -> True,
    Value         -> {CKM[1,1] -> Cos[cabi],  CKM[1,2] -> Sin[cabi], CKM[1,3] -> 0,
                      CKM[2,1] -> -Sin[cabi], CKM[2,2] -> Cos[cabi], CKM[2,3] -> 0,
                      CKM[3,1] -> 0,          CKM[3,2] -> 0,         CKM[3,3] -> 1},
    TeX         -> Superscript[V,CKM],
    Description -> "CKM-Matrix"}
};

(* ************************** *)
(* *****   Lagrangian   ***** *)
(* ************************** *)

LGauge := Block[{mu,nu,ii,aa}, 
  ExpandIndices[-1/4 FS[B,mu,nu] FS[B,mu,nu] - 1/4 FS[Wi,mu,nu,ii] FS[Wi,mu,nu,ii] - 1/4 FS[G,mu,nu,aa] FS[G,mu,nu,aa], FlavorExpand->SU2W]];

LFermions := Block[{mu}, 
  ExpandIndices[I*(
    QLbar.Ga[mu].DC[QL, mu] + LLbar.Ga[mu].DC[LL, mu] + uRbar.Ga[mu].DC[uR, mu] + dRbar.Ga[mu].DC[dR, mu] + lRbar.Ga[mu].DC[lR, mu]), 
  FlavorExpand->{SU2W,SU2D}]/.{CKM[a_,b_] Conjugate[CKM[a_,c_]]->IndexDelta[b,c], CKM[b_,a_] Conjugate[CKM[c_,a_]]->IndexDelta[b,c]}];

LHiggs := Block[{ii,mu, feynmangaugerules},
  feynmangaugerules = If[Not[FeynmanGauge], {G0|GP|GPbar ->0}, {}];
 
  ExpandIndices[DC[Phibar[ii],mu] DC[Phi[ii],mu] + muH^2 Phibar[ii] Phi[ii] - lam Phibar[ii] Phi[ii] Phibar[jj] Phi[jj], FlavorExpand->{SU2D,SU2W}]/.feynmangaugerules
 ];

LYukawa := Block[{sp,ii,jj,cc,ff1,ff2,ff3,yuk,feynmangaugerules},
  feynmangaugerules = If[Not[FeynmanGauge], {G0|GP|GPbar ->0}, {}];
 
  yuk = ExpandIndices[
   -yd[ff2, ff3] CKM[ff1, ff2] QLbar[sp, ii, ff1, cc].dR [sp, ff3, cc] Phi[ii] - 
    yl[ff1, ff3] LLbar[sp, ii, ff1].lR [sp, ff3] Phi[ii] - 
    yu[ff1, ff2] QLbar[sp, ii, ff1, cc].uR [sp, ff2, cc] Phibar[jj] Eps[ii, jj], FlavorExpand -> SU2D];
  yuk = yuk /. { CKM[a_, b_] Conjugate[CKM[a_, c_]] -> IndexDelta[b, c], CKM[b_, a_] Conjugate[CKM[c_, a_]] -> IndexDelta[b, c]};
  yuk+HC[yuk]/.feynmangaugerules
 ];

LGhost := Block[{LGh1,LGhw,LGhs,LGhphi,mu, generators,gh,ghbar,Vectorize,phi1,phi2,togoldstones,doublet,doublet0},
  (* Pure gauge piece *) 	
  LGh1 = -ghBbar.del[DC[ghB,mu],mu];
  LGhw = -ghWibar[ii].del[DC[ghWi[ii],mu],mu];
  LGhs = -ghGbar[ii].del[DC[ghG[ii],mu],mu];

  (* Scalar pieces: see Peskin pages 739-742 *)
  (* phi1 and phi2 are the real degrees of freedom of GP *)
  (* Vectorize transforms a doublet in a vector in the phi-basis, i.e. the basis of real degrees of freedom *)
  gh    = {ghB, ghWi[1], ghWi[2], ghWi[3]};
  ghbar = {ghBbar, ghWibar[1], ghWibar[2], ghWibar[3]};
  generators = {-I/2 g1 IdentityMatrix[2], -I/2 gw PauliSigma[1], -I/2 gw PauliSigma[2], -I/2 gw PauliSigma[3]};
  doublet = Expand[{(-I phi1 - phi2)/Sqrt[2], Phi[2]} /. MR$Definitions /. vev -> 0]; 
  doublet0 = {0, vev/Sqrt[2]};
  Vectorize[{a_, b_}]:= Simplify[{Sqrt[2] Re[Expand[a]], Sqrt[2] Im[Expand[a]], Sqrt[2] Re[Expand[b]], Sqrt[2] Im[Expand[b]]}/.{Im[_]->0, Re[num_]->num}];
  togoldstones := {phi1 -> (GP + GPbar)/Sqrt[2], phi2 -> (-GP + GPbar)/(I Sqrt[2])};
  LGhphi=Plus@@Flatten[Table[-ghbar[[kkk]].gh[[lll]] Vectorize[generators[[kkk]].doublet0].Vectorize[generators[[lll]].(doublet+doublet0)],{kkk,4},{lll,4}]] /.togoldstones;

ExpandIndices[ LGhs + If[FeynmanGauge, LGh1 + LGhw + LGhphi,0], FlavorExpand->SU2W]];

(* ******************************** *)
(* ****      NP Lagrangian     **** *)
(* ******************************** *)


 LNP0  := Block[{mu,nu},
                ExpandIndices[

           - 1/4 FS[X0,mu,nu] FS[X0,mu,nu] + 1/2 mX0^2 X0[mu] X0[mu]     - schi/4 FS[X0,mu,nu] FS[B,mu,nu]
           + I/2 X1bar.Ga[mu].del[X1,mu]   -     mX1/2 X1bar.X1
           + I/2 X2bar.Ga[mu].del[X2,mu]   -     mX2/2 X2bar.X2
           + I/2 HNL4bar.Ga[mu].del[HNL4,mu]   -     mHNL4/2 HNL4bar.HNL4         (*  HNL have a simple derivative  *)
           + I/2 HNL5bar.Ga[mu].del[HNL5,mu]   -     mHNL5/2 HNL5bar.HNL5         (*  HNL have a simple derivative  *)
           + I/2 HNL6bar.Ga[mu].del[HNL6,mu]   -     mHNL6/2 HNL6bar.HNL6         (*  HNL have a simple derivative  *)
           + I/2 HNL7bar.Ga[mu].del[HNL7,mu]   -     mHNL7/2 HNL7bar.HNL7         (*  HNL have a simple derivative  *)
           + I/2 HNL8bar.Ga[mu].del[HNL8,mu]   -     mHNL8/2 HNL8bar.HNL8         (*  HNL have a simple derivative  *)
           + I nu3bar.Ga[mu].del[nu3,mu]   -     mnu3 nu3bar.nu3 
           + 1/2 del[S0,mu]   del[S0,mu]   - 1/2 mS0^2 S0^2

           + (mS0^2/vevscal^2) (S0^2)^2 + lambdaphih S0^2 H^2

                              ]
                ];



 LNP1  := Block[{mu,sp1,sp2},
                ExpandIndices[



           - e0 epsilondark ebar[sp1] Ga[mu,sp1,sp2] e[sp2] X0[mu]
           - e0 epsilondark mubar[sp1] Ga[mu,sp1,sp2] mu[sp2] X0[mu]

           + I gX QX X2bar.Ga[mu].X1  ( (cbeta/cchi) X0[mu] + ((Sqrt[1-cbeta^2])/cchi) Z[mu] )   (* iDM vector interaction, I have added the Z mediated interaction as well *)

           + Ychi  (S0 Cos[thetascalar] - H Sin[thetascalar])  ( X2bar[sp1] X2[sp1] + X1bar[sp1] X1[sp1])    (* iDM scalar interaction *)                    

                              ]
                ];



 LNP2  := Block[{mu,sp1,sp2,sp3},
                ExpandIndices[

           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c33 Z[mu]+ d33 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c34 Z[mu]+ d34 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c35 Z[mu]+ d35 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c36 Z[mu]+ d36 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c37 Z[mu]+ d37 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c38 Z[mu]+ d38 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c43 Z[mu]+ d43 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c44 Z[mu]+ d44 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c45 Z[mu]+ d45 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c46 Z[mu]+ d46 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c47 Z[mu]+ d47 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c48 Z[mu]+ d48 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c53 Z[mu]+ d53 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c54 Z[mu]+ d54 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c55 Z[mu]+ d55 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c56 Z[mu]+ d56 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c57 Z[mu]+ d57 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c58 Z[mu]+ d58 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c63 Z[mu]+ d63 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c64 Z[mu]+ d64 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c65 Z[mu]+ d65 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c66 Z[mu]+ d66 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c67 Z[mu]+ d67 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c68 Z[mu]+ d68 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c73 Z[mu]+ d73 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c74 Z[mu]+ d74 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c75 Z[mu]+ d75 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c76 Z[mu]+ d76 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c77 Z[mu]+ d77 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c78 Z[mu]+ d78 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c83 Z[mu]+ d83 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c84 Z[mu]+ d84 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c85 Z[mu]+ d85 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c86 Z[mu]+ d86 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c87 Z[mu]+ d87 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c88 Z[mu]+ d88 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )


           + HC[ - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c33 Z[mu]+ d33 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c34 Z[mu]+ d34 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c35 Z[mu]+ d35 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c36 Z[mu]+ d36 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c37 Z[mu]+ d37 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( nu3bar[sp1] Ga[mu,sp1,sp2] (c38 Z[mu]+ d38 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c43 Z[mu]+ d43 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c44 Z[mu]+ d44 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c45 Z[mu]+ d45 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c46 Z[mu]+ d46 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c47 Z[mu]+ d47 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL4bar[sp1] Ga[mu,sp1,sp2] (c48 Z[mu]+ d48 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c53 Z[mu]+ d53 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c54 Z[mu]+ d54 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c55 Z[mu]+ d55 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c56 Z[mu]+ d56 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c57 Z[mu]+ d57 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL5bar[sp1] Ga[mu,sp1,sp2] (c58 Z[mu]+ d58 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c63 Z[mu]+ d63 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c64 Z[mu]+ d64 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c65 Z[mu]+ d65 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c66 Z[mu]+ d66 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c67 Z[mu]+ d67 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL6bar[sp1] Ga[mu,sp1,sp2] (c68 Z[mu]+ d68 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c73 Z[mu]+ d73 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c74 Z[mu]+ d74 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c75 Z[mu]+ d75 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c76 Z[mu]+ d76 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c77 Z[mu]+ d77 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL7bar[sp1] Ga[mu,sp1,sp2] (c78 Z[mu]+ d78 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c83 Z[mu]+ d83 X0[mu]) ProjM[sp2,sp3] nu3[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c84 Z[mu]+ d84 X0[mu]) ProjM[sp2,sp3] HNL4[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c85 Z[mu]+ d85 X0[mu]) ProjM[sp2,sp3] HNL5[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c86 Z[mu]+ d86 X0[mu]) ProjM[sp2,sp3] HNL6[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c87 Z[mu]+ d87 X0[mu]) ProjM[sp2,sp3] HNL7[sp3] )
           - ( HNL8bar[sp1] Ga[mu,sp1,sp2] (c88 Z[mu]+ d88 X0[mu]) ProjM[sp2,sp3] HNL8[sp3] ) ]




                               (* Neutrino vectorial interaction under L-R symmetry *)

                              ]
                ];







 LNP4  := Block[{mu,sp1},
                ExpandIndices[



           - ( (nu3bar[sp1] nu3[sp1] Deltaphi33 ) + (nu3bar[sp1] HNL4[sp1] Deltaphi34 ) + (nu3bar[sp1] HNL5[sp1] Deltaphi35 ) + (nu3bar[sp1] HNL6[sp1] Deltaphi36 ) + (nu3bar[sp1] HNL7[sp1] Deltaphi37 ) + (nu3bar[sp1] HNL8[sp1] Deltaphi38 ) 
                + (HNL4bar[sp1] nu3[sp1] Deltaphi43 ) + (HNL4bar[sp1] HNL4[sp1] Deltaphi44 ) + (HNL4bar[sp1] HNL5[sp1] Deltaphi45 ) + (HNL4bar[sp1] HNL6[sp1] Deltaphi46 ) + (HNL4bar[sp1] HNL7[sp1] Deltaphi47 ) + (HNL4bar[sp1] HNL8[sp1] Deltaphi48 )
                + (HNL5bar[sp1] nu3[sp1] Deltaphi53 ) + (HNL5bar[sp1] HNL4[sp1] Deltaphi54 ) + (HNL5bar[sp1] HNL5[sp1] Deltaphi55 ) + (HNL5bar[sp1] HNL6[sp1] Deltaphi56 ) + (HNL5bar[sp1] HNL7[sp1] Deltaphi57 ) + (HNL5bar[sp1] HNL8[sp1] Deltaphi58 )
                + (HNL6bar[sp1] nu3[sp1] Deltaphi63 ) + (HNL6bar[sp1] HNL4[sp1] Deltaphi64 ) + (HNL6bar[sp1] HNL5[sp1] Deltaphi65 ) + (HNL6bar[sp1] HNL6[sp1] Deltaphi66 ) + (HNL6bar[sp1] HNL7[sp1] Deltaphi67 ) + (HNL6bar[sp1] HNL8[sp1] Deltaphi68 )
                + (HNL7bar[sp1] nu3[sp1] Deltaphi73 ) + (HNL7bar[sp1] HNL4[sp1] Deltaphi74 ) + (HNL7bar[sp1] HNL5[sp1] Deltaphi75 ) + (HNL7bar[sp1] HNL6[sp1] Deltaphi76 ) + (HNL7bar[sp1] HNL7[sp1] Deltaphi77 ) + (HNL7bar[sp1] HNL8[sp1] Deltaphi78 ) 
                + (HNL8bar[sp1] nu3[sp1] Deltaphi83 ) + (HNL8bar[sp1] HNL4[sp1] Deltaphi84 ) + (HNL8bar[sp1] HNL5[sp1] Deltaphi85 ) + (HNL8bar[sp1] HNL6[sp1] Deltaphi86 ) + (HNL8bar[sp1] HNL7[sp1] Deltaphi87 ) + (HNL8bar[sp1] HNL8[sp1] Deltaphi88 )

                + HC[ (nu3bar[sp1] nu3[sp1] Deltaphi33 ) + (nu3bar[sp1] HNL4[sp1] Deltaphi34 ) + (nu3bar[sp1] HNL5[sp1] Deltaphi35 ) + (nu3bar[sp1] HNL6[sp1] Deltaphi36 ) + (nu3bar[sp1] HNL7[sp1] Deltaphi37 ) + (nu3bar[sp1] HNL8[sp1] Deltaphi38 ) 
                + (HNL4bar[sp1] nu3[sp1] Deltaphi43 ) + (HNL4bar[sp1] HNL4[sp1] Deltaphi44 ) + (HNL4bar[sp1] HNL5[sp1] Deltaphi45 ) + (HNL4bar[sp1] HNL6[sp1] Deltaphi46 ) + (HNL4bar[sp1] HNL7[sp1] Deltaphi47 ) + (HNL4bar[sp1] HNL8[sp1] Deltaphi48 )
                + (HNL5bar[sp1] nu3[sp1] Deltaphi53 ) + (HNL5bar[sp1] HNL4[sp1] Deltaphi54 ) + (HNL5bar[sp1] HNL5[sp1] Deltaphi55 ) + (HNL5bar[sp1] HNL6[sp1] Deltaphi56 ) + (HNL5bar[sp1] HNL7[sp1] Deltaphi57 ) + (HNL5bar[sp1] HNL8[sp1] Deltaphi58 )
                + (HNL6bar[sp1] nu3[sp1] Deltaphi63 ) + (HNL6bar[sp1] HNL4[sp1] Deltaphi64 ) + (HNL6bar[sp1] HNL5[sp1] Deltaphi65 ) + (HNL6bar[sp1] HNL6[sp1] Deltaphi66 ) + (HNL6bar[sp1] HNL7[sp1] Deltaphi67 ) + (HNL6bar[sp1] HNL8[sp1] Deltaphi68 )
                + (HNL7bar[sp1] nu3[sp1] Deltaphi73 ) + (HNL7bar[sp1] HNL4[sp1] Deltaphi74 ) + (HNL7bar[sp1] HNL5[sp1] Deltaphi75 ) + (HNL7bar[sp1] HNL6[sp1] Deltaphi76 ) + (HNL7bar[sp1] HNL7[sp1] Deltaphi77 ) + (HNL7bar[sp1] HNL8[sp1] Deltaphi78 ) 
                + (HNL8bar[sp1] nu3[sp1] Deltaphi83 ) + (HNL8bar[sp1] HNL4[sp1] Deltaphi84 ) + (HNL8bar[sp1] HNL5[sp1] Deltaphi85 ) + (HNL8bar[sp1] HNL6[sp1] Deltaphi86 ) + (HNL8bar[sp1] HNL7[sp1] Deltaphi87 ) + (HNL8bar[sp1] HNL8[sp1] Deltaphi88 ) ] )    * (S0 Cos[thetascalar] - H Sin[thetascalar])  

                        

                                     (* i=3,4,5,6,DN   j=4,5,6 so is a 5x3         i: initial state,   j: final state *)
                                     (* NEUTRINO SCALAR VERTICIES dark scalar *)





                              ]
                ];





(*   Missing: vector neutrinos with Z0(gauge basis) and scalar neutrino with h(gauge basis), but I didn't want to add a lot of parameters at the same time...    *)
(*   Missing: dark neutrinos interaction terms, no Sij, Vij available in any paper....  Actually in the vectorial interactions there are cij and dij but requires a lot of parameters   *)

(* ******************************** *)
(* *****   Total Lagrangian   ***** *)
(* ******************************** *)


 LNP :=  LNP0 + LNP1 + LNP2 + LNP4  ;

 LSM := LGauge + LFermions + LHiggs + LYukawa + LGhost;


